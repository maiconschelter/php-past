<appendix id="phpdevel">
 <title>PHP development</title>

 <sect1 id="phpdevel-addfunc">
  <title>Adding functions to PHP3</title>
  <simpara></simpara>

 <sect1 id="calling-user-functions">
  <title>Calling User Functions</title>

  <simpara>
   To call user functions from an internal function, you should use
   the <function>call_user_function</function> function.
  </simpara>

  <simpara>
   <function>call_user_function</function> returns SUCCESS on success,
   and FAILURE in case the function cannot be found.  You should check
   that return value!  If it returns SUCCESS, you are responsible for
   destroying the retval pval yourself (or return it as the return value
   of your function). If it returns FAILURE, the value of retval is
   undefined, and you mustn't touch it.
  </simpara>

  <simpara>
   All internal functions that call user functions
   <emphasis>must</emphasis> be reentrant.  Among other things, this
   means they must not use globals or static variables.
  </simpara>

  <simpara>
   <function>call_user_function</function> takes six arguments:
  </simpara>

  <sect2 id="calling-user-functions.function-table">
   <title>HashTable *function_table</title>
   <simpara>
    This is the hash table in which the function is to be looked up.
   </simpara>

  <sect2 id="calling-user-functions.object">
   <title>pval *object</title>
   <simpara>
    This is a pointer to an object on which the function is invoked.
    This should be NULL if a global function is called.  If it's not
    NULL (i.e.  it points to an object), the function_table argument is
    ignored, and instead taken from the object's hash.  The object *may*
    be modified by the function that is invoked on it (that function
    will have access to it via $this).  If for some reason you don't
    want that to happen, send a copy of the object instead.
   </simpara>

  <sect2 id="calling-user-functions.function-name">
   <title>pval *function_name</title>
   <simpara>
    The name of the function to call.  Must be a pval of type
    IS_STRING with function_name.str.val and function_name.str.len
    set to the appropriate values.  The function_name is modified by
    call_user_function() - it's converted to lowercase.  If you need to
    preserve the case, send a copy of the function name instead.
   </simpara>

  <sect2 id="calling-user-functions.retval">
   <title>pval *retval</title>
   <simpara>
    A pointer to a pval structure, into which the return value of
    the invoked function is saved.  The structure must be previously
    allocated - <function>call_user_function</function> does NOT allocate
    it by itself.
   </simpara>

  <sect2 id="calling-user-functions.param-count">
   <title>int param_count</title>
   <simpara>
    The number of parameters being passed to the function.
   </simpara>

  <sect2 id="calling-user-functions.params">
   <title>pval *params[]</title>
   <simpara>
    An array of pointers to values that will be passed as arguments to the
    function, the first argument being in offset 0, the second in offset
    1, etc.  The array is an array of pointers to pval's;  The pointers
    are sent as-is to the function, which means if the function modifies
    its arguments, the original values are changed (passing by reference).
    If you don't want that behavior, pass a copy instead.
   </simpara>

 <sect1 id="phpdevel-errors">
  <title>Reporting Errors</title>

  <simpara>
   To report errors from an internal function, you should call the
   <function>php3_error</function> function. This takes at least two
   parameters -- the first is the level of the error, the second is
   the format string for the error message (as in a standard
   <function>printf</function> call), and any following arguments
   are the parameters for the format string. The error levels are:
  </simpara>

  <sect2 id="internal.e-notice">
   <title>E_NOTICE</title>
   <simpara>
    Notices are not printed by default, and indicate that the script
    encountered something that could indicate an error, but could also
    happen in the normal course of running a script. For example,
    trying to access the value of a variable which has not been set,
    or calling <function>stat</function> on a file that doesn't exist.
   </simpara>
  </sect2>

  <sect2 id="internal.e-warning">
   <title>E_WARNING</title>
   <simpara>
    Warnings are printed by default, but do not interrupt script
    execution.  These indicate a problem that should have been trapped
    by the script before the call was made. For example, calling 
	<function>ereg</function> with an invalid regular expression.
   </simpara>
  </sect2>

  <sect2 id="internal.e-error">
   <title>E_ERROR</title>
   <simpara>
    Errors are also printed by default, and execution of the script is
    halted after the function returns. These indicate errors that can
    not be recovered from, such as a memory allocation problem.
   </simpara>
  </sect2>

  <sect2 id="internal.e-parse">
   <title>E_PARSE</title>
   <simpara>
    Parse errors should only be generated by the parser. The code is
    listed here only for the sake of completeness.
   </simpara>
  </sect2>

  <sect2 id="internal.e-core-error">
   <title>E_CORE_ERROR</title>
   <simpara>
    This is like an E_ERROR, except it is generated by the core
    of PHP. Functions should not generate this type of error.
   </simpara>
  </sect2>

  <sect2 id="internal.e-core-warning">
   <title>E_CORE_WARNING</title>
   <simpara>
    This is like an E_WARNING, except it is generated by the core
    of PHP. Functions should not generate this type of error.
   </simpara>
  </sect2>

 <sect1 id="phpdevel-hhgtpi">
  <title>Hitchhiker's guide to PHP internals</title>
  <simpara></simpara>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
