
 <reference id="ref.regex">
  <title>Regular expression functions</title>


  <refentry id="function.ereg">
   <refnamediv>
    <refname>ereg</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ereg</function></funcdef>
     <paramdef>string <parameter>pattern</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>array <parameter>regs</parameter></paramdef>
    </funcsynopsis>
    <para>
     Searchs string for matches to the regular expression
     given in pattern. If matches are found for
     parenthesized substrings of pattern and the function is
     called with the third argument regs, the matches
     will be stored in the elements of regs.

    <para>
     Searching is case sensitive.

    <para>
     Returns true if a match for pattern was found in string, or false
     if no matches were found or an error occurred.
    
    <para>
     The following code snippet takes a date in ISO format (YYYY-MM-DD)
     and prints it in DD.MM.YYYY format:
     <example>
      <title>ereg() example</title>
      <programlisting>
if ( ereg( "([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs ) ) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "Invalid date format: $date";
}
</programlisting></example>

    <para>
     See also <link linkend="function.eregi">eregi</link>, <link
      linkend="function.ereg-replace">ereg_replace</link>, and <link
      linkend="function.eregi-replace">eregi_replace</link>.

   </refsect1>
  </refentry>


  <refentry id="function.ereg-replace">
   <refnamediv>
    <refname>ereg_replace</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ereg_replace</function></funcdef>
     <paramdef>string <parameter>pattern</parameter></paramdef>
     <paramdef>string <parameter>replacement</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     This function scans string for matches to pattern, then replaces
     the matched text with replacement.

    <para>
     If pattern contains parenthesized substrings, replacement may
     contain substrings of the form
     <literal>\\<replaceable>digit</replaceable></literal>, which will
     be replaced by the text matching the digit'th parenthesized
     substring; <literal>\\0</literal> will produce the entire
     contents of string.  Up to nine substrings may be
     used.  Parentheses may be nested, in which case they are counted
     by the opening parenthesis.  For example, the following code
     snippet prints "This was a test" three times:
     <example>
      <title>ereg_replace() example</title>
      <programlisting>
$string = "This is a test";
echo ereg_replace( " is", " was", $string );
echo ereg_replace( "( )is", "\\1was", $string );
echo ereg_replace( "(( )is)", "\\2was", $string );
</programlisting></example>

     See also <link linkend="function.ereg">ereg</link>, <link
    linkend="function.eregi">eregi</link>, and <link
    linkend="function.eregi-replace">eregi_replace</link>.

   </refsect1>
  </refentry>


  <refentry id="function.eregi">
   <refnamediv>
    <refname>eregi</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>eregi</function></funcdef>
     <paramdef>string <parameter>pattern</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>array <parameter>regs</parameter></paramdef>
    </funcsynopsis>
    <para>
     This function is identical to <link
      linkend="function.ereg">ereg</link> save that this ignores
     case distinction when matching alphabetic characters.

    <para>
     See also <link linkend="function.ereg">ereg</link>, <link
    linkend="function.ereg-replace">ereg_replace</link>, and <link
    linkend="function.eregi-replace">eregi_replace</link>.
  
   </refsect1>
  </refentry>


  <refentry id="function.eregi-replace">
   <refnamediv>
    <refname>eregi_replace</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>eregi_replace</function></funcdef>
     <paramdef>string <parameter>pattern</parameter></paramdef>
     <paramdef>string <parameter>replacement</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     This function is identical to <link
      linkend="function.ereg-replace">ereg_replace</link> save that
     this ignores case distinction when matching alphabetic characters.

    <para>
     See also <link linkend="function.ereg">ereg</link>, <link
     linkend="function.eregi">eregi</link>, and <link
     linkend="function.ereg-replace">ereg_replace</link>.

   </refsect1>
  </refentry>


  <refentry id="function.split">
   <refnamediv>
    <refname>split</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>split</function></funcdef>
     <paramdef>string <parameter>pattern</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>int <parameter>limit</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns an array of strings, each of which is a substring of
     string formed by splitting it on boundaries formed
     by pattern. If an error occurs, returns false.

    <para>
     To get the first five fields from a line from
     <filename>/etc/passwd</filename>:
    <example>
      <title>split() example</title>
      <programlisting>
$passwd_list = split( ":", $passwd_line, 5 );
</programlisting></example>

   </refsect1>
  </refentry>


  <refentry id="function.sql-regcase">
   <refnamediv>
    <refname>sql_regcase</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>sql_regcase</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a valid regular expression which will match string,
     ignoring case. This expression is string with each character
     converted to a bracket expression; this bracket expression
     contains that character's uppercase and lowercase form if
     applicable, otherwise it contains the original character
     twice.
     <example>
      <title>sql_regcase() example</title>
      <programlisting>
echo sql_regcase( "Foo bar" );
</programlisting></example>

     prints <screen>[Ff][Oo][Oo][ ][Bb][Aa][Rr]</screen>.

    <para>
     This can be used to achieve case insensitive pattern matching in
     products which support only case sensitive regular expressions.
  
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
