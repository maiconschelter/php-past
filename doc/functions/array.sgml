
 <reference id="ref.array">
  <title>Array Functions</title>


  <refentry id="function.count">
   <refnamediv>
    <refname>count</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>count</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     The number of elements in the array.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.current">
   <refnamediv>
    <refname>current</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>current</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     The array element that's currently being pointed by the internal array pointer.
  

  Each array variable has an internal pointer that points to one of its elements.  In
  addition, all of the elements in the array are linked by a bidirectional linked list
  for traversing purposes.
  The internal pointer points to the first element that was inserted to the array until
  you run one of the functions that modify that pointer on that array.
  The current() function simply returns the array element that's currently being pointed
  by the internal pointer.  It does not move the pointer in any way.
  If the internal pointer points beyond the end of the elements list, current() returns
  an empty string.

  See also:  <link linkend="function.next">next</link>, <link linkend="function.prev">prev</link>.</para>
   </refsect1>
  </refentry>


  <refentry id="function.next">
   <refnamediv>
    <refname>next</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>next</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     The array element in the next place that's pointed by the internal array pointer,
    or false if there are no more elements.
  

  next() behaves like <link linkend="function.current">current</link> with one difference.  It advances
  the internal array pointer one place forward before returning the element.  That
  means it returns the next array element and advances the internal array pointer by one.
  If advancing the internal array pointer results in going beyond the end of the element
  list, next() returns an empty string (false).

  See also:  <link linkend="function.current">current</link>, <link linkend="function.prev">prev</link>.</para>
   </refsect1>
  </refentry>


  <refentry id="function.prev">
   <refnamediv>
    <refname>prev</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>prev</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     The array element in the previous place that's pointed by the internal array pointer,
    or false if there are no more elements.
  

  prev() behaves just like <link linkend="function.next">next</link>, except it rewinds the internal array pointer
  one place instead of advancing it.

  See also:  <link linkend="function.current">current</link>, <link linkend="function.next">next</link>.</para>
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
