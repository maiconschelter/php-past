
 <reference id="ref.url">
  <title>URL functions</title>


  <refentry id="function.parse-url">
   <refnamediv>
    <refname>parse_url</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>parse_url</function></funcdef>
     <paramdef>string <parameter>url</parameter></paramdef>
    </funcsynopsis>
<para>Returns:    This function returns an associative array returning any of the various
   components of the URL that are present. This includes the "scheme", "host",
   "port", "user", "pass", "path", "query", and "fragment".
 </para>
   </refsect1>
  </refentry>


  <refentry id="function.urldecode">
   <refnamediv>
    <refname>urldecode</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>urldecode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Decodes any <literal>%<replaceable>##</replaceable></literal>
     encoding in the given string.  The decoded string is returned.
     <example>
      <title>urldecode() example</title>
      <programlisting>
$a = split ('&', $querystring);
$i = 0;
while ($i &lt; count ($a)) {
  $b = split ('=', $a [$i]);
  echo 'Value for parameter ', htmlspecialchars (urldecode ($b [0])),
       ' is ', htmlspecialchars (urldecode ($b [1])), "&lt;BR>";
  $i++;
}
</programlisting></example>
 
    <para>
     See also <link linkend="function.urlencode">urlencode</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>urlencode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a string in which all non-alphanumeric characters except
     <literal>-_.</literal> have been replaced with a percent
     (<literal>%</literal>) sign followed by two hex digits and spaces
     encoded as plus (<literal>+</literal>) signs.  It is encoded the
     same way that the posted data from a WWW form is encoded, that is
     the same way as in
     <literal>application/x-www-form-urlencoded</literal> media type.
     This differs from the RFC1738 encoding (see <link
     linkend="function.rawurlencode">rawurlencode</link> ) in that
     for historical reasons, spaces are encoded as plus (+ ) signs.
     This function is convenient when encoding a string to be used in
     a query part of an URL, as a convinient way to pass variables to
     the next page:

     <example>
      <title>urlencode() example</title>
      <programlisting>
echo '&lt;A HREF="mycgi?foo=', urlencode ($userinput), '">';
</programlisting></example>
 
    <para>
     See also <link linkend="function.urldecode">urldecode</link></para>

   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
