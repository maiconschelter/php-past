
 <reference id="ref.odbc">
  <title>ODBC Functions</title>


  <refentry id="function.odbc-autocommit">
   <refnamediv>
    <refname>odbc_autocommit</refname>
    <refpurpose>Toggle autocommit behaviour</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_autocommit</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>int <parameter>OnOff</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns TRUE on success, FALSE on failure.
    <para>
     By default, autocommit is on for a connection.<simpara>
     See also <link linkend="function.odbc-commit">odbc_commit</link>,
     <link linkend="function.odbc-rollback">odbc_rollback</link>.
   </refsect1>
  </refentry>


  <refentry id="function.odbc-close">
   <refnamediv>
    <refname>odbc_close</refname>
    <refpurpose>Close an ODBC connection</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>odbc_close</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>

    <para>
     odbc_close will close down the connection to the database server
     associated with the given connection identifier.

     <note><simpara>
       This function will fail if there are open
       transactions on this connection.  The connection will remain open
       in this case.
      </simpara></note>

   </refsect1>
  </refentry>

  <refentry id="function.odbc-close-all">
   <refnamediv>
    <refname>odbc_close_all</refname>
    <refpurpose>Close all ODBC connections</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>odbc_close_all</function></funcdef>
     <void>
    </funcsynopsis>

    <para>
     odbc_close_all will close down all connections to database server(s).

     <note><simpara>
       This function will fail if there are open
       transactions on a connection. This connection will remain open
       in this case.
      </simpara></note>

   </refsect1>
  </refentry>

  <refentry id="function.odbc-commit">
   <refnamediv>
    <refname>odbc_commit</refname>
    <refpurpose>Commit an ODBC transaction</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_commit</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
<para>Returns:   TRUE on success, FALSE on failure.
 
 All pending transactions on connection_id are committed.
   </refsect1>
  </refentry>


  <refentry id="function.odbc-connect">
   <refnamediv>
    <refname>odbc_connect</refname>
    <refpurpose>Connect to a datasource</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_connect</function></funcdef>
     <paramdef>string <parameter>dsn</parameter></paramdef>
     <paramdef>string <parameter>user</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
    </funcsynopsis>
<para>Returns:   Returns an ODBC connection id or 0 (false) on error.
 

  The connection id returned by this functions is needed by other
  ODBC functions. You can have multiple connections open at once.
  For persistent connections see
  <!-- XXX FIXME make a link here when odbc_pconnect() gets
       documented -->
  <!-- link linkend="function.odbc-pconnect">odbc_pconnect</link -->
  <function>odbc_pconnect()</function>.
   </refsect1>
  </refentry>

  <refentry id="function.odbc-cursor">
   <refnamediv>
    <refname>odbc_cursor</refname>
    <refpurpose>Get cursorname</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_cursor</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     odbc_cursor will return a cursorname for the given result_id.
   </refsect1>
  </refentry>

  <refentry id="function.odbc-do">
   <refnamediv>
    <refname>odbc_do</refname>
    <refpurpose>synonym for <link linkend="function.odbc-exec">odbc_exec</link></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_do</function></funcdef>
     <paramdef>int <parameter>conn_id</parameter></paramdef>
     <paramdef>string <parameter>query</parameter></paramdef>
    </funcsynopsis>
    <para>
     odbc_do will execute a query on the given connection
   </refsect1>
  </refentry>


  <refentry id="function.odbc-exec">
   <refnamediv>
    <refname>odbc_exec</refname>
    <refpurpose>Prepare and execute a SQL statement</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_exec</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>string <parameter>query_string</parameter></paramdef>
    </funcsynopsis>
<para>Returns:   Returns 0 (false) on error. Returns an ODBC result
  identifier if the SQL command was executed successfully.
 odbc_exec will send an SQL statement to the database server specified by
 the connection_id. The connection_id must be a valid identifier that
 was returned by <link linkend="function.odbc-connect">odbc_connect</link> or
 <link linkend="function.odbc-pconnect">odbc_pconnect</link>.
<simpara> 
See also: <link linkend="function.odbc-prepare">odbc_prepare</link> and <link linkend="function.odbc-execute">odbc_execute</link> for multiple execution of SQL statements.
   </refsect1>
  </refentry>

<refentry id="function.odbc-execute">
 <refnamediv>
  <refname>odbc_execute</refname>
   <refpurpose></refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_execute</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
    <paramdef>array
      <parameter><optional>parameters_array</optional></parameter></paramdef>
   </funcsynopsis>
   <para>
     Executes a statement prepared with
     <link linkend="function.odbc-prepare">odbc_prepare()</link>. Returns
     TRUE on successful execution, FALSE otherwise.
  </refsect1>
</refentry>


  <refentry id="function.odbc-fetch-into">
   <refnamediv>
    <refname>odbc_fetch_into</refname>
    <refpurpose>Fetch one result row into array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fetch_into</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter><optional>rownumber</optional></parameter></paramdef>
     <paramdef>array <parameter>result_array</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns the number of columns in the result; FALSE on error.
     result_array must be passed by reference, but it can be of any
     type since it will be converted to type array. The array will
     contain the column values starting at array index 0.
   </refsect1>
  </refentry>


  <refentry id="function.odbc-fetch-row">
   <refnamediv>
    <refname>odbc_fetch_row</refname>
    <refpurpose>Fetch a row</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fetch_row</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter><optional>row_number</optional></parameter></paramdef>
    </funcsynopsis>
<para>Returns:   If odbc_Fetch_Row was succesful (there was a row), 
  1 is returned, if there are no more rows, odbc_Fetch_Row will 
  return 0.
  The return value of odbc_FetchRow can be used as the
  condition of a while loop.
 
  odbc_Fetch_Row fetches a row of the data that was returned by 
  <link linkend="function.odbc-exec">odbc_do</link> / <link linkend="function.odbc-exec">odbc_exec</link>.
  After odbc_Fetch_Row is called, the fields of that row can be accessed
  with odbc_Result. If no rownumber is given, odbc_Fetch_Row will try to
  fetch the next row in the result set. Calls to
  odbc_Fetch_Row() with and without rownumber can be mixed. To step
  through the result more than once, you can call odbc_Fetch_Row() with
  rownumber 1 and then continue with odbc_Fetch_Row() without rownumber
  to review the result. If a driver doesn't support fetching rows by number,
  the rownumber parameter is ignored.

   </refsect1>
  </refentry>


  <refentry id="function.odbc-field-name">
   <refnamediv>
    <refname>odbc_field_name</refname>
    <refpurpose>Get the columnname</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_fieldname</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
<para>Returns: odbc_Field_Name will return the name of the field 
  occupying the given column number in the given ODBC result identifier.
  Field numbering starts at 1. 
  0 (false) is returned on error.
 
   </refsect1>
  </refentry>


  <refentry id="function.odbc-field-num">
   <refnamediv>
    <refname>odbc_field_num</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fieldnum</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter>field_name</parameter></paramdef>
    </funcsynopsis>
   <para>Returns: Odbc_Field_Num will return the number of the column
   slot that corresponds to the named field in the given ODBC result
   identifier.  Field numbering starts at 1. 0 (false) is returned
    on error.
 
   </refsect1>
  </refentry>


  <refentry id="function.odbc-field-type">
   <refnamediv>
    <refname>odbc_field_type</refname>
    <refpurpose>datatype of a field</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_field_type</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>mixed <parameter>field</parameter></paramdef>
    </funcsynopsis>
<para>Returns: Odbc_FieldType will return the SQL type of the field 
  referecend by name or number in the given ODBC result identifier.
  Note: Field numbering starts from 1.
 
   </refsect1>
  </refentry>


  <refentry id="function.odbc-free-result">
   <refnamediv>
    <refname>odbc_free_result</refname>
    <refpurpose>free resources associated with a result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_free_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
<para>Returns:   True (1).
   odbc_free_result only needs to be called if you are worried about using
   too much memory while your script is running.  All result memory will
   automatically be freed when the script is finished.  But, if you are
   sure you are not going to need the result data anymore in a script,
   you may call odbc_free_result with the result identifier as an argument
   and the associated result memory will be freed. Note: If autocommit
   has been turned off, all pending transactions are rolled back if you
   call odbc_free_result prior to commiting. 
   </refsect1>
  </refentry>

  <refentry id="function.odbc-num-fields">
   <refnamediv>
    <refname>odbc_num_fields</refname>
    <refpurpose>number of columns in a result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_num_fields</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>Returns: Odbc_Num_Fields will return the number of fields 
    (columns) in an ODBC result.
    This function will return -1 on error.
    The argument is a valid result identifier returned by 
    <link linkend="function.odbc-exec">odbc_exec</link>().
   </refsect1>
  </refentry>

<refentry id="function.odbc-pconnect">
   <refnamediv>
    <refname>odbc_pconnect</refname>
    <refpurpose>Open a persistent database connection</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_pconnect</function></funcdef>
     <paramdef>string <parameter>dsn</parameter></paramdef>
     <paramdef>string <parameter>user</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
    </funcsynopsis>
    <para>Returns: Returns an ODBC connection id or 0 (false) on error.
    This function is much like odbc_connect except that the connection
    isn't closed when the script has finished. Future requests for
    a connection with the same dsn, user, password combination (via
    odbc_connect() and odbc_pconnect()) can reuse the persistent connection.
    Note: Persistent connections don't work if PHP is used as a CGI.
    For more information on persistent connections refer to the PHP3 FAQ.
  </refsect1>
</refentry>

<refentry id="function.odbc-prepare">
 <refnamediv>
  <refname>odbc_prepare</refname>
   <refpurpose>Prepares a statement for execution</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_prepare</function></funcdef>
    <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>string <parameter>query_string</parameter></paramdef>
    </funcsynopsis>
   <para>Returns:   Returns 0 (false) on error. Returns an ODBC result
   identifier if the SQL command was prepared successfully. The result
   identifier can be used later to execute the statement with 
   <link linkend="function.odbc-execute">odbc_execute</link>().
  </refsect1>
</refentry>

  <refentry id="function.odbc-num-rows">
   <refnamediv>
    <refname>odbc_num_rows</refname>
    <refpurpose>Number of rows in a result</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_num_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
   <para>Returns: odbc_num_rows will return the number of rows 
    in an ODBC result.
    This function will return -1 on error. 
    For INSERT, UPDATE and DELETE statements odbc_num_rows() 
    returns the number of rows affected. For a SELECT clause this can be 
    the number of rows available. Note: Using odbc_num_rows() after
    a SELECT is not supported by most ODBC drivers and thus returns -1. 
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result">
   <refnamediv>
    <refname>odbc_result</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>mixed <parameter>field</parameter></paramdef>
    </funcsynopsis>
   <para>Returns:   Contents of the field.
 
  Field indices start from 1. If the requested field contains binary data or
  is longer than 4096 bytes, the contents is not returned, instead it is sent
  directly to the client. Hint: If you need to have binary data returned,
  use the SQL function HEX() to retrieve the field in hexadecimal notation.
  E.g. "SELECT HEX(binary_col) FROM mytable"
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result-all">
   <refnamediv>
    <refname>odbc_result_all</refname>
    <refpurpose>Print result as HTML table</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_result_all</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter><optional>format</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns the number of rows in the result or FALSE on error.

    <para>
     odbc_result_all() will print all rows from a result identifier
     produced by <link
     linkend="function.odbc-exec">odbc_exec</link>(). The result is
     printed in HTML table format.  With the optional string argument
     <parameter>format</parameter> additional overall table additional
     overall table formatting can be done.
   </refsect1>
  </refentry>


  <refentry id="function.odbc-rollback">
   <refnamediv>
    <refname>odbc_rollback</refname>
    <refpurpose>Rollback a transaction</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_rollback</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Rolls back all pending statements on
     <parameter>connection_id</parameter>.  Returns TRUE on success,
     FALSE
 on failure.
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->



