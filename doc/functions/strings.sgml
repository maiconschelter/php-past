
 <reference id="ref.strings">
  <title>String functions</title>


  <refentry id="function.addslashes">
   <refnamediv>
    <refname>AddSlashes</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>addslashes</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a string with a backslashes before characters that need
     to be quoted in database queries etc.  These characters are
     single quote (<literal>'</literal>), double quote
     (<literal>"</literal>) and backslash (<literal>\</literal>).

    <para>
     See also <link
     linkend="function.stripslashes">stripslashes</link> and <link
     linkend="function.quotemeta">quotemeta</link>.

   </refsect1>
  </refentry>


  <refentry id="function.chop">
   <refnamediv>
    <refname>Chop</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>chop</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns the argument string without trailing whitespace.
     <example>
      <title>chop() example</title>
      <programlisting>
$trimmed = Chop($line);
</programlisting></example>

   </refsect1>
  </refentry>


  <refentry id="function.chr">
   <refnamediv>
    <refname>Chr</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>chr</function></funcdef>
     <paramdef>int <parameter>ascii</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a one-character string containing the character specified
     by ascii.
     <example>
      <title>chr() example</title>
      <programlisting>
$str += chr(27); /* add an escape character at the end of $str */
</programlisting></example>

     This function complements <link
     linkend="function.ord">ord</link>.

   </refsect1>
  </refentry>


  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>output one or more strings</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef <function>echo</function></funcdef>
     <paramdef>string <parameter>arg1</parameter></paramdef>
     <paramdef>string <parameter><optional>argn</optional>...</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Outputs all parameters.

    <simpara>
     See also:
     <link linkend="function.print">print</link>
     <link linkend="function.printf">printf</link>
     <link linkend="function.flush">flush</link>

   </refsect1>
  </refentry>


  <refentry id="function.explode">
   <refnamediv>
    <refname>explode</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>explode</function></funcdef>
     <paramdef>string <parameter>separator</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>

     Returns an array of strings containing the elements separated by
     <replaceable>separator</replaceable>.
     
     <example>
      <title>explode() example</title>
      <programlisting>
$pizza = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
</programlisting></example>

    <para>
     See also <link linkend="function.split">split</link> and
     <link linkend="function.implode">implode</link>.

   </refsect1>
  </refentry>


  <refentry id="function.flush">
   <refnamediv>
    <refname>flush</refname>
    <refpurpose>flush the output buffer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>flush</function></funcdef>
     <void>
    </funcsynopsis>
    <simpara>
     Flushes the output buffers of PHP and whatever backend PHP is
     using (CGI, a web server, etc.)  This effectively tries to push
     all the output so far to the user's browser.

   </refsect1>
  </refentry>



  <refentry id="function.implode">
   <refnamediv>
    <refname>implode</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>implode</function></funcdef>
     <paramdef>array <parameter>pieces</parameter></paramdef>
     <paramdef>string <parameter>glue</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a string containing a string representation of all the
     array elements in the same order, with the glue string between
     each element.
     <example>
      <title>implode() example</title>
      <programlisting>
$colon_separated = join($array, ":");
</programlisting></example>

   </refsect1>
  </refentry>


  <refentry id="function.ord">
   <refnamediv>
    <refname>Ord</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ord</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns the ASCII value of the first character of string.  This
     function complements <link linkend="function.chr">chr</link>.
     <example>
      <title>ord() example</title>
      <programlisting>
if (ord($str) == 10) {
    echo("The first character of \$str is a line feed.\n");
}
</programlisting></example>

   </refsect1>
  </refentry>


  <refentry id="function.print">
   <refnamediv>
    <refname>print</refname>
    <refpurpose>output a string</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef <function>print</function></funcdef>
     <paramdef>string <parameter>arg</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Outputs the parameter.

    <simpara>
     See also:
     <link linkend="function.echo">echo</link>
     <link linkend="function.printf">printf</link>
     <link linkend="function.flush">flush</link>

   </refsect1>
  </refentry>


  <refentry id="function.printf">
   <refnamediv>
    <refname>printf</refname>
    <refpurpose>output a formatted string</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef <function>print</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed <parameter>args</parameter>...</paramdef>
    </funcsynopsis>

    <simpara>
     Produces output according to <parameter>format</parameter>, which
     is described in the documentation for <link
      linkend="function.sprintf">sprintf</link>.

    <simpara>
     See also:
     <link linkend="function.printf">print</link>
     <link linkend="function.printf">sprintf</link>
     <link linkend="function.flush">flush</link>

   </refsect1>
  </refentry>


  <refentry id="function.quotemeta">
   <refnamediv>
    <refname>QuoteMeta</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>quotemeta</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a version of str with a backslash character
     (<literal>\</literal>) before every character that is among
     these: <screen>. \\ + * ? [ ^ ] ( $ )</screen>

   </refsect1>
  </refentry>


  <refentry id="function.rawurldecode">
   <refnamediv>
    <refname>rawurldecode</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>rawurldecode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a string in which the sequences with percent
     (<literal>%</literal>) signs followed by two hex digits have been
     replaced with literal characters.  For example, the string
     <screen>foo%20bar%40baz</screen> decodes into
     <screen>foo bar@baz</screen>.

   </refsect1>
  </refentry>


  <refentry id="function.rawurlencode">
   <refnamediv>
    <refname>rawurlencode</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>rawurlencode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a string in which all non-alphanumeric characters except
     <screen>-_.</screen> have been replaced with a percent
     (<literal>%</literal>) sign followed by two hex digits.  This is
     the encoding described in RFC1738 for protecting literal
     characters from being interpreted as special URL delimiters, and
     for protecting URL's from being mangled by transmission media
     with character conversions (like some email systems).  For
     example, if you want to include a password in a ftp url:
     <example>
      <title>rawurlencode() example 1</title>
      <programlisting>
echo '&lt;A HREF="ftp://user:', rawurlencode ('foo @+%/'),
     '@ftp.my.com/x.txt">';
</programlisting></example>

     Or, if you pass information in a path info component of the url:

     <example>
      <title>rawurlencode() example 2</title>
      <programlisting>
echo '&lt;A HREF="http://x.com/department_list_script/',
     rawurlencode ('sales and marketing/Miami'), '">';
</programlisting></example>

   </refsect1>
  </refentry>


  <refentry id="function.setlocale">
   <refnamediv>
    <refname>setlocale</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>setlocale</function></funcdef>
     <paramdef>string <parameter>category</parameter></paramdef>
     <paramdef>string <parameter>locale</parameter></paramdef>
    </funcsynopsis>
    <para>
     category is a string specifying the category of the functions
     affected by the locale setting:
     <itemizedlist>
      <listitem><simpara>
	LC_ALL for all of the below
       </simpara></listitem><listitem><simpara>
	LC_COLLATE for string comparison - not currently implemented in PHP
       </simpara></listitem><listitem><simpara>
	LC_CTYPE for character classification and conversion, for
	example strtoupper()
       </simpara></listitem><listitem><simpara>
	LC_MONETARY for localeconv() - not currently implemented in PHP
       </simpara></listitem><listitem><simpara>
	LC_NUMERIC for decimal separator
       </simpara></listitem><listitem><simpara>
	LC_TIME for time formats - not currently implemented in PHP
       </simpara></listitem>
     </itemizedlist>

    <para>
     If locale is an empty string <literal>""</literal>, the locale
     names will be set from the values of environment variables with
     the same names as the above categories, or from "LANG".

    <para>
     If locale is zero or <literal>"0"</literal>, the locale setting
     is not affected, only the current setting is returned.

    <para>
     Setlocale returns the new current locale, or false if the locale
     functionality is not implemented in the plattform, the specified
     locale does not exist or the category name is invalid.
     Invalid category name also causes a warning message.

   </refsect1>
  </refentry>


  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>return a formatted string</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef <function>sprint</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed <parameter>args</parameter>...</paramdef>
    </funcsynopsis>

    <simpara>
     Returns a string produced according to the formatting string
     <parameter>format</parameter>.

    <simpara>
     The format string is composed by zero or more directives:
     ordinary characters (excluding <literal>%</literal>) that are
     copied directly to the result, and <emphasis>conversion
     specifications</emphasis>, each of which results in fetching its
     own parameter.  This applies to both sprintf and <link
      linkend="function.printf">printf</link>

    <para>
     Each conversion specification consists of these elements, in
     order:
     <orderedlist>
      <listitem><simpara>

	An optional <emphasis>padding specifier</emphasis> that says
	what character will be used for padding the results to the
	right string size.  This may be a space character or a
	<literal>0</literal> (zero character).  The default is to pad
	with spaces.  An alternate padding character can be specified
	by prefixing it with a single quote (<literal>'</literal>).
	See the examples below.

      <listitem><simpara>

	An optional <emphasis>alignment specifier</emphasis> that says
	if the result should be left-justified or right-justified.
	The default is right-justified, a <literal>-</literal>
	character here will make it left-justified.

      <listitem><simpara>

	An optional number, a <emphasis>width specifier</emphasis>
	that says how many characters (minimum) this conversion should
	result in.

      <listitem><simpara>

	An optional <emphasis>precision specifier</emphasis> that says
	how many decimal digits should be displayed for floating-point
	numbers.  This option has no effect for other types than
	double.

      <listitem><para>

	A <emphasis>type specifier</emphasis> that says what type the
	argument data should be treated as.  Possible types:
	<simplelist>

	 <member>
	  <literal>%</literal> - a literal percent character. No
	  argument is required.
	 </member>

	 <member>
	  <literal>b</literal> - the argument is treated as an
	  integer, and presented as a binary number.
	 </member>

	 <member>
	  <literal>c</literal> - the argument is treated as an
	  integer, and presented as the character with that ASCII
	  value.
	 </member>

	 <member>
	  <literal>d</literal> - the argument is treated as an
	  integer, and presented as a decimal number.
	 </member>

	 <member>
	  <literal>f</literal> - the argument is treated as a double,
	  and presented as a floating-point number.
	 </member>

	 <member>
	  <literal>o</literal> - the argument is treated as an
	  integer, and presented as an octal number.
	 </member>

	 <member>
	  <literal>s</literal> - the argument is treated as and
	  presented as a string.
	 </member>

	 <member>
	  <literal>x</literal> - the argument is treated as an
	  integer and presented as a hexadecimal number (with
	  lowercase letters).
	 </member>

	 <member>
	  <literal>X</literal> - the argument is treated as an
	  integer and presented as a hexadecimal number (with
	  uppercase letters).
	 </member>

	</simplelist>

     </orderedlist>

    <simpara>
     See also:
     <link linkend="function.printf">printf</link>

   </refsect1>

   <refsect1>
    <title>Examples</title>
    <para>
     <example>
      <title>sprintf: zero-padded integers</title>
      <programlisting>
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
</programlisting></example>

    </para>
   </refsect1>
  </refentry>


  <refentry id="function.stripslashes">
   <refnamediv>
    <refname>StripSlashes</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>stripslashes</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns a string with backslashes stripped off.
     (<literal>\'</literal> becomes <literal>'</literal> and so on.)
     Double backslashes are made into a single backslash.

   </refsect1>
  </refentry>


  <refentry id="function.strlen">
   <refnamediv>
    <refname>strlen</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strlen</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns the length of <parameter>string</parameter>.

   </refsect1>
  </refentry>


  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strtok</function></funcdef>
     <paramdef>string <parameter>arg1</parameter></paramdef>
     <paramdef>string <parameter>arg2</parameter></paramdef>
    </funcsynopsis>
    <para>
     strtok() is used to tokenize a string.  That is, if you have a
     string like "This is an example string" you could tokenize this
     string into its individual words by using the space character as
     the token.
     <example>
      <title>strtok() example</title>
      <programlisting>
&lt;?php

    $string = "This is an example string";
    $tok = strtok($string," ");
    while($tok) {
        echo "Word=$tok&lt;br>";
        $tok = strtok(" ");
    }

?></programlisting></example>

    <para>
     Note that only the first call to strtok uses the string argument.
     Every subsequent call to strtok only needs the token to use, as
     it keeps track of where it is in the current string.  To start
     over, or to tokenize a new string you simply call strtok with the
     string argument again to initialize it.  Note that you may put
     multiple tokens in the token parameter.  The string will be
     tokenized when any one of the characters in the argument are
     found.

    <para>
     See also <link linkend="function.split">split</link> and
     <link linkend="function.explode">explode</link>.

   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
