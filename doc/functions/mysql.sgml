
 <reference id="ref.mysql">
  <title>MySQL Functions</title>


  <refentry id="function.mysql">
   <refnamediv>
    <refname>mysql</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql</function></funcdef>
     <paramdef>string <parameter>database</parameter></paramdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int <parameter>link_identifier</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     A positive MySQL result identifier to the query result,
    or false on error.
  

  mysql() selects a database and executes a query on it.
  If the optional link identifier isn't specified, the function
  will try to find an open link to the MySQL server and if no
  such link is found it'll try to create one as if mysql_connect()
  was called with no arguments (see <link linkend="function.mysql-connect">mysql_connect</link>).</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-affected-rows">
   <refnamediv>
    <refname>mysql_affected_rows</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_affected_rows</function></funcdef>
     <paramdef>int <parameter>link_identifier</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     The number of affected rows by the last query.
  

  mysql_affected_rows() returns the number of rows affected by the last
  insert, update or delete query on the server associated with the
  specified link identifier.  If the link identifier isn't specified,
  the last opened link is assumed.</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-close">
   <refnamediv>
    <refname>mysql_close</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_close</function></funcdef>
     <paramdef>int <parameter>link_identifier</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     true on success, false on error
  

  mysql_close() closes the link to a MySQL database that's
  associated with the specified link identifier.  If the
  link identifier isn't specified, the last opened link is assumed.
  
  Note that this isn't usually necessary, as non-persistent open
  links are automatically closed at the end of the script's
  execution.
  
  mysql_close() will not close persistent links generated by
  mysql_pconnect().
  
  See also:  <link linkend="function.mysql-connect">mysql_connect</link>, <link linkend="function.mysql-pconnect">mysql_pconnect</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-connect">
   <refnamediv>
    <refname>mysql_connect</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_connect</function></funcdef>
     <paramdef>string <parameter>hostname</parameter></paramdef>
     <paramdef>string <parameter>username</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     A positive MySQL link identifier on success, or false on error.
  

  mysql_connect() establishes a connection to a MySQL server.
  All of the arguments are optional, and if they're missing, defaults
  are assumed ('localhost', user name of the user that owns the server
  process, empty password).

  In case a second call is made to mysql_connect() with the same
  arguments, no new link will be established, but instead, the link
  identifier of the already opened link will be returned.
  
  The link to the server will be closed as soon as the execution
  of the script ends, unless it's closed earlier by explicitly
  calling <link linkend="function.mysql-close">mysql_close</link>.
  
  See also <link linkend="function.mysql-pconnect">mysql_pconnect</link>, <link linkend="function.mysql-close">mysql_close</link>.</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-create-db">
   <refnamediv>
    <refname>mysql_create_db</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_create_db</function></funcdef>
     <void>
    </funcsynopsis>
<para>  mysql_create_db() attempts to create a new database on
  the server associated with the specified link
  identifier.
  
  See also:  <link linkend="function.mysql-drop-db">mysql_drop_db</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-createdb">
   <refnamediv>
    <refname>mysql_createdb</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_createdb</function></funcdef>
     <void>
    </funcsynopsis>
<para>  Identical to <link linkend="function.mysql-create-db">mysql_create_db</link>.</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-data-seek">
   <refnamediv>
    <refname>mysql_data_seek</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_data_seek</function></funcdef>
     <paramdef>int <parameter>result_identifier</parameter></paramdef>
     <paramdef>int <parameter>row_number</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     true on success, false on failure
  
  
  mysql_data_seek() moves the internal row pointer of the MySQL
  result associated with the specified result identifier to
  pointer to the specifyed row number.
  The next call to mysql_fetch_row() would return that row.
  
  See also:  <link linkend="function.mysql-fetch-row">mysql_fetch_row</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-dbname">
   <refnamediv>
    <refname>mysql_dbname</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_dbname</function></funcdef>
     <paramdef>string <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
<para>
    mysql_dbname returns the database name stored in position $i of
    the result pointer returned from the <link linkend="function.mysql-listdbs">mysql_listdbs</link>
    function. The <link linkend="function.mysql-numrows">mysql_numrows</link> function can be used to
    determine how many database names are available.
  </para><para>
   mysql_dbname returns the database name stored in position
   i
 of the result pointer returned from the <link linkend="function.mysql-listdbs">mysql_listdbs</link> function. The <link linkend="function.mysql-numrows">mysql_numrows</link>
   function can be used to determine how many database names are
   available.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-drop-db">
   <refnamediv>
    <refname>mysql_drop_db</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_drop_db</function></funcdef>
     <paramdef>string <parameter>database_name</parameter></paramdef>
     <paramdef>int <parameter>link_identifier</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     true on success, false on failure.
  

  mysql_drop_db() attempts to drop (remove) an entire
  database from the server associated with the specified link
  identifier.
  
  See also:  <link linkend="function.mysql-create-db">mysql_create_db</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_fetch_array</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     An array that corresponds to the fetched row, or false if there are
    no more rows.
  
  
  mysql_fetch_array() is an extended version of <link linkend="function.mysql-fetch-row">mysql_fetch_row</link>.  In
  addition to storing the data in the numeric indices of the result array, it
  also stores the data in associative indices, using the field names as keys.

  An important thing to note is that using mysql_fetch_array() is NOT
  significantly slower than using mysql_fetch_row(), while it provides a
  significant added value.
  
  For further details, also see <link linkend="function.mysql-fetch-row">mysql_fetch_row</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-fetch-field">
   <refnamediv>
    <refname>mysql_fetch_field</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>object <function>mysql_fetch_field</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>field_offset</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns an object containing field information.
  
    <para>
     mysql_fetch_field() can be used in order to obtain information about
     fields in a certain query result.  If the field offset isn't
     specified, the next field that wasn't yet retreived by
     mysql_fetch_field() is retreived.

    <para>
     The properties of the object are:

     <itemizedlist>

      <listitem><simpara>
	name - column name
       </simpara></listitem>

      <listitem><simpara>
	table - name of the table the column belongs to
       </simpara></listitem>

      <listitem><simpara>
	max_length - maximum length of the column
       </simpara></listitem>

      <listitem><simpara>
	not_null - 1 if the column cannot be null
       </simpara></listitem> 

      <listitem><simpara>
	primary_key - 1 if the column is a primary key
       </simpara></listitem> 

      <listitem><simpara>
	unique_key - 1 if the column is a unique key
       </simpara></listitem> 

      <listitem><simpara>
	multiple_key - 1 if the column is a non-unique key
       </simpara></listitem> 

      <listitem><simpara>
	numeric - 1 if the column is numeric
       </simpara></listitem> 

      <listitem><simpara>
	blob - 1 it the column is a BLOB
       </simpara></listitem>

      <listitem><simpara>
	type - the type of the column
       </simpara></listitem>

      <listitem><simpara>
	unsigned - 1 if the column is unsigned
       </simpara></listitem>

      <listitem><simpara>
	zerofill - 1 if the column is zero-filled
       </simpara></listitem>

      </itemizedlist>

    <para>
     See also <link
     linkend="function.mysql-field-seek">mysql_field_seek</link>

   </refsect1>
  </refentry>


  <refentry id="function.mysql-fetch-lengths">
   <refnamediv>
    <refname>mysql_fetch_lengths</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_fetch_lengths</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     An array that corresponds to the lengths of each field in the
    last row fetched by mysql_fetch_row(), or false on error.
  
  
  mysql_fetch_lengths() stores the lengths of each result column
  in the last row returned by mysql_fetch_row() in an array,
  starting at offset 0.
  
  See also:  <link linkend="function.mysql-fetch-row">mysql_fetch_row</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-fetch-object">
   <refnamediv>
    <refname>mysql_fetch_object</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_fetch_object</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     An object with properties that correspond to the fetched row, or false
    if there are no more rows.
  
  
  mysql_fetch_object() is similar to <link linkend="function.mysql-fetch-array">mysql_fetch_array</link>, with
  one difference - an object is returned, instead of an array.  Indirectly,
  that means that you can only access the data by the field names, and not
  by their offsets (numbers are illegal property names).
  
  Speed-wise, the function is identical to mysql_fetch_array(), and almost
  as quick as mysql_fetch_row() (the difference is insignificant).
  
  See also:  <link linkend="function.mysql-fetch-array">mysql_fetch_array</link>, <link linkend="function.mysql-fetch-row">mysql_fetch_row</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-fetch-row">
   <refnamediv>
    <refname>mysql_fetch_row</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>mysql_fetch_row</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     An array that corresponds to the fetched row, or false if there are
    no more rows.
  
  
  mysql_fetch_row() fetches one row of data from the result
  associated with the specified result identifier.  The row
  is returned as an array.
  Each result column is stored in an array offset, starting at
  offset 0.
  
  Subsequent call to mysql_fetch_rows() would return
  the next row in the result set, or false if there are no more
  rows.
  
  See also:  <link linkend="function.mysql-fetch-array">mysql_fetch_array</link>, <link linkend="function.mysql-fetch-object">mysql_fetch_object</link>,
             <link linkend="function.mysql-data-seek">mysql_data_seek</link>, <link linkend="function.mysql-fetch-lengths">mysql_fetch_lengths</link>,
             <link linkend="function.mysql-result">mysql_result</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-field-name">
   <refnamediv>
    <refname>mysql_field_name</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_field_name</function></funcdef>
     <paramdef>string <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
<para>
   mysql_field_name returns the name of the specified field. Arguments
   to the function is the result identifier and the field index, ie.
   mysql_fieldname($result,2);
<para>
   Will return the name of the second field in the result associated
   with the result identifier.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-field-seek">
   <refnamediv>
    <refname>mysql_field_seek</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_field_seek</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>field_offset</parameter></paramdef>
    </funcsynopsis>
<para>
  Seeks to the specified field offset.  If the next call
  to mysql_fetch_field() won't include a field offset,
  this field would be returned.
  
  See also:  <link linkend="function.mysql-fetch-field">mysql_fetch_field</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-field-table">
   <refnamediv>
    <refname>mysql_field_table</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_field_table</function></funcdef>
     <void>
    </funcsynopsis>
<para>    Another new function in PHP 3. This function is listed in
    PHPFUNCTIONS as mysql_fieldtable!!!
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-field-type">
   <refnamediv>
    <refname>mysql_field_type</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_field_type</function></funcdef>
     <paramdef>string <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
<para>
   mysql_field_type is similar to the <link linkend="function.mysql-field-name">mysql_field_name</link>
   function. The arguments are identical, but the field type is
   returned. This will be one of "int", "char" or "real".
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-fieldflags">
   <refnamediv>
    <refname>mysql_fieldflags</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_fieldflags</function></funcdef>
     <paramdef>string <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
<para>   
    mysql_fieldflags returns the field flags of the specified
    field. Currently this is either, "not null", "primary key", a
    combination of the two or "" (an empty string).
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-fieldlen">
   <refnamediv>
    <refname>mysql_fieldlen</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_fieldlen</function></funcdef>
     <paramdef>string <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
<para>
   mysql_fieldlen returns the length of the specified field.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-freeresult">
   <refnamediv>
    <refname>mysql_freeresult</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_freeresult</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>
     mysql_freeresult only needs to be called if you are worried about
     using too much memory while your script is running. All result
     memory will automatically be freed when the script, you may call
     mysql_freeresult with the result identifier as an argument and
     the associated result memory will be freed.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-insert-id">
   <refnamediv>
    <refname>mysql_insert_id</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_insert_id</function></funcdef>
     <void>
    </funcsynopsis>
<para>    mysql_insert_id() returns the ID generated for an AUTO_INCREMENTED
    field. This function takes no arguments. It will return the
    auto-generated ID returned by the last INSERT
 query
    performed

  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-list-fields">
   <refnamediv>
    <refname>mysql_list_fields</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_list_fields</function></funcdef>
     <paramdef>string <parameter>database</parameter></paramdef>
     <paramdef>string <parameter>tablename</parameter></paramdef>
    </funcsynopsis>
<para>
    mysql_list_fields retrieves information about the given
    tablename. Arguments are the database name and the table name. A
    result pointer is returned which can be used with
    <link linkend="function.mysql-fieldflags">mysql_fieldflags</link>, 
    <link linkend="function.mysql-fieldlen">mysql_fieldlen</link>, 
    <link linkend="function.mysql-field-name">mysql_field_name</link>, and
    <link linkend="function.mysql-field-type">mysql_field_type</link>. 
    A result identifier is a positive integer. The function returns -1
    if a error occurs. A string describing the error will be placed in
    $phperrmsg, and unless the function was called as @mysql() then
    this error string will also be printed out.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-listdbs">
   <refnamediv>
    <refname>mysql_listdbs</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_listdbs</function></funcdef>
     <void>
    </funcsynopsis>
    <para>
     mysql_listdbs will return a result pointer containing the
     databases available from the current mysql daemon. Use the <link
     linkend="function.mysql-dbname">mysql_dbname</link> function
     to traverse this result pointer.

     <comment>Is this function correct?</comment>
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-listtables">
   <refnamediv>
    <refname>mysql_listtables</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_listtables</function></funcdef>
     <paramdef>string <parameter>database</parameter></paramdef>
    </funcsynopsis>
<para>
    mysql_listtables takes a database name and result pointer much
    like the <link linkend="function.mysql">mysql</link> function. The <link linkend="function.mysql-tablename">mysql_tablename</link> function should be used to extract the
    actual table names from the result pointer.
  </para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-num-fields">
   <refnamediv>
    <refname>mysql_num_fields</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_num_fields</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>
  mysql_num_fields() returns the number of fields in a result set.
  
  See also:  <link linkend="function.mysql">mysql</link>, <link linkend="function.mysql-query">mysql_query</link>, <link linkend="function.mysql-fetch-field">mysql_fetch_field</link>, <link linkend="function.mysql-num-rows">mysql_num_rows</link>,</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-num-rows">
   <refnamediv>
    <refname>mysql_num_rows</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_num_rows</function></funcdef>
     <paramdef>string <parameter>result</parameter></paramdef>
    </funcsynopsis>
<para>
  mysql_num_rows() returns the number of rows in a result set.
  
  See also:  <link linkend="function.mysql">mysql</link>, <link linkend="function.mysql-query">mysql_query</link>, <link linkend="function.mysql-fetch-row">mysql_fetch_row</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-numfields">
   <refnamediv>
    <refname>mysql_numfields</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_numfields</function></funcdef>
     <void>
    </funcsynopsis>
<para>  Identical to <link linkend="function.mysql-num-fields">mysql_num_fields</link>.</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-numrows">
   <refnamediv>
    <refname>mysql_numrows</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_numrows</function></funcdef>
     <void>
    </funcsynopsis>
<para>  Identical to <link linkend="function.mysql-num-rows">mysql_num_rows</link>.</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-pconnect">
   <refnamediv>
    <refname>mysql_pconnect</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_pconnect</function></funcdef>
     <paramdef>string <parameter>hostname</parameter></paramdef>
     <paramdef>string <parameter>username</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     A positive MySQL persistent link identifier on success, or
    false on error
      
  
  mysql_pconnect() acts very much like <link linkend="function.mysql-connect">mysql_connect</link>
  with two major differences.
  
  First, when connecting, the function would first try to find
  a (persistent) link that's already open with the same
  host, username and password.  If one is found, an identifier
  for it will be returned instead of opening a new connection.
  
  Second, the connection to the SQL server will not be closed
  when the execution of the script ends.  Instead, the link
  will remain open for future use (<link linkend="function.mysql-close">mysql_close</link>
  will not close links established by mysql_pconnect()).
  
  This type of links is therefore called 'persistent'.</para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-query">
   <refnamediv>
    <refname>mysql_query</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_query</function></funcdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int <parameter>link_identifier</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     A positive MySQL result identifier on success, or false on error.
  

  mysql_query() sends a query to the currently active database on
  the server that's associated with the specified link identifier.
  If the link identifier isn't specified, the last opened link
  is assumed.  If no link is open, the function tries to
  establish a link as if mysql_connect() was called, and use it.
  
  See also:  <link linkend="function.mysql">mysql</link>, <link linkend="function.mysql-select-db">mysql_select_db</link>, <link linkend="function.mysql-connect">mysql_connect</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-result">
   <refnamediv>
    <refname>mysql_result</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_result</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
     <paramdef>mixed <parameter>field</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     The contents of the cell at the row and offset in the specified
    MySQL result set.
  
  
  mysql_result() returns the contents of one cell from a MySQL
  result set.  The field argument can be the field's offset,
  or the field's name, or the field's table dot field's name
  (fieldname.tablename).
  If the column name has been aliased ('select foo as bar from...'),
  use the alias instead of the column name.
  
  When working on large result sets, you should consider using
  one of the functions that fetch an entire row (specified below).
  As these functions return the contents of multiple cells in
  one function call, they're MUCH quicker than mysql_result().
  Also, note that specifying a numeric offset for the field argument
  is much quicker than specifying a fieldname or tablename.fieldname
  argument.
  
  Recommended high-performance alternatives:
  <link linkend="function.mysql-fetch-row">mysql_fetch_row</link>, <link linkend="function.mysql-fetch-array">mysql_fetch_array</link>,
  <link linkend="function.mysql-fetch-object">mysql_fetch_object</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-select-db">
   <refnamediv>
    <refname>mysql_select_db</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>mysql_select_db</function></funcdef>
     <paramdef>string <parameter>database_name</parameter></paramdef>
     <paramdef>int <parameter>link_identifier</parameter></paramdef>
    </funcsynopsis>
<para>Returns:     true on success, false on error
  
  
  mysql_select_db() sets the current active database on the server
  that's associated with the specified link identifier.  If no
  link identifier is specified, the last opened link is assumed.
  If no link is open, the function will try to establish a link
  as if mysql_connect() was called, and use it.
  
  Every subsequent call to <link linkend="function.mysql-query">mysql_query</link>() will be 
  made on the active database.
  
  See also:  <link linkend="function.mysql-connect">mysql_connect</link>, <link linkend="function.mysql-pconnect">mysql_pconnect</link>, <link linkend="function.mysql-query">mysql_query</link></para>
   </refsect1>
  </refentry>


  <refentry id="function.mysql-tablename">
   <refnamediv>
    <refname>mysql_tablename</refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>mysql_tablename</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>i</parameter></paramdef>
    </funcsynopsis>
<para>    
    mysql_tablename takes a result pointer returned by the <link linkend="function.mysql-listtables">mysql_listtables</link> function as well as an integer index and
    returns the name of a table. The <link linkend="function.mysql-numrows">mysql_numrows</link>
    function may be used to determine the number of tables in the
    result pointer.
     <example><title>mysql_tablename() example</title>
      <programlisting>
&lt;? mysql_connect ("localhost");
   $result = mysql_listtables ("wisconsin");
   $i = 0;
   while ($i &lt; mysql_numrows ($result)) {
     $tb_names[$i] = mysql_tablename ($result, $i);
     echo $tb_names[$i] . "&lt;BR>";
     $i++;
   }
?></programlisting></example>


  </para>
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
