 <reference id="ref.http">
  <title>Functions related to HTTP</title>
  <titleabbrev>HTTP</titleabbrev>

  <partintro>
  <simpara>
	These functions let you manipulate the output sent back to the
	remote browser right down to the HTTP protocol level.
  </partintro>

  <refentry id="function.getallheaders">
   <refnamediv>
    <refname>getallheaders</refname>
    <refpurpose>Fetch all HTTP request headers</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>getallheaders</function></funcdef>
     <void>
    </funcsynopsis>
    <para>
     This function returns an associative array of all the HTTP headers in the 
     current request.
     <example>
      <title>GetAllHeaders() Example</title>
      <programlisting>
$headers = getallheaders();
while (list($header, $value) = each($headers)) {
    echo "$header: $value&lt;br&gt;\n";
}
</programlisting></example>
     This example will display all the request headers for the
     current request.
     <note>
      <simpara>
       <function>GetAllHeaders</function> is currently only supported
       when PHP runs as an <productname>Apache</productname> module.
      </simpara>
     </note>
   </refsect1>
  </refentry>

  <refentry id="function.header">
   <refnamediv>
    <refname>header</refname>
    <refpurpose>Send a raw HTTP header</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>header</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     The <function>Header</function> function is used at the top of an
     <acronym>HTML</acronym> file to send raw <acronym>HTTP</acronym>
     header strings.  See the <ulink url="&spec.http1.0;">HTTP 1.0
     Specification</ulink> for more information on raw http headers.
     Remember that the <function>Header</function> function must be
     called before any actual output is sent either by normal HTML
     tags or from PHP.
    <para>
     <informalexample><programlisting role=php>
Header("Location: http://www.php.net");  /* Redirect browser to PHP web site */
</programlisting></informalexample>
   </refsect1>
  </refentry>

  <refentry id="function.setcookie">
   <refnamediv>
    <refname>setcookie</refname>
    <refpurpose>Send a cookie</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>setcookie</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
     <paramdef>string <parameter>value</parameter></paramdef>
     <paramdef>int <parameter>expire</parameter></paramdef>
     <paramdef>string <parameter>path</parameter></paramdef>
     <paramdef>string <parameter>domain</parameter></paramdef>
     <paramdef>int <parameter>secure</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>SetCookie</function> defines a cookie to be sent along
     with the rest of the header information.  All the arguments
     except the <parameter>name</parameter> argument are optional.  If
     only the name argument is present, the cookie by that name will
     be deleted from the remote client.  You may also replace any
     argument with an empty string (<emphasis>&quot;&quot;</emphasis>)
     in order to skip that argument.  The
     <parameter>expire</parameter> and <parameter>secure</parameter>
     arguments are integers and cannot be skipped with an empty
     string.  Use a zero (<emphasis>0</emphasis>) instead.  The
     <parameter>expire</parameter> argument is a regular Unix time
     integer as returned by the <function>time</function> or
     <function>mktime</function> functions.  The
     <parameter>secure</parameter> indicates that the cookie should
     only be transmitted over a secure HTTPS connection.  Some
     examples follow:
     <example>
      <title>SetCookie examples</title>
      <programlisting role=php>
SetCookie("TestCookie","Test Value");
SetCookie("TestCookie",$value,time()+3600);  /* expire in 1 hour */
SetCookie("TestCookie",$value,time()+3600,"/~rasmus/",".utoronto.ca",1);
</programlisting></example>
    <para>
     Note that the value portion of the cookie will automatically be
     urlencoded when you send the cookie, and when it is received, it
     is automatically decoded and assigned to a variable by the same
     name as the cookie name.  ie. to see the contents of our test
     cookie in a script, simply do:
<informalexample><programlisting role=php>
echo $TestCookie;
</programlisting></informalexample>
    <para>
     For more information on cookies, see Netscape's cookie
     specification at <ulink url="&spec.cookies;">&spec.cookies;</ulink>.
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
